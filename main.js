!function(){"use strict";const e=".popup__form",t=".profile__info";class s{constructor(e,s){let{data:r,handleCardImageClick:i,handleCardDeleteClick:n,handleCardLikeClick:a}=e;this._data=r,this._name=r.name,this._link=r.link,this._likes=r.likes,this._id=r._id,this._userId=document.querySelector(t).id,this._ownerId=r.owner._id,this._templateSelector=s,this._handleCardImageClick=i,this._handleCardDeleteClick=n,this._handleCardLikeClick=a}createCard(){return this._card=this._getElement(),this._cardName=this._card.querySelector(".card__name"),this._cardImage=this._card.querySelector(".card__image"),this._cardLikeButton=this._card.querySelector(".card__like-button"),this._cardLikeCount=this._card.querySelector(".card__like-count"),this._cardDeleteButton=this._card.querySelector(".card__delete-button"),this._cardName.textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt=this._name,this._card.id=this._id,this._cardLikeCount.textContent=this._getLikeCount(this._data),this._findLikeStatus(),this._authenticateCardDelete(),this._setEventListeners(),this._card}_getElement(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}_findLikeStatus(){this._isLiked=this._getLikedUserIds().includes(this._userId),this._isLiked&&this._toggleCardLikeButton()}_listenCardLikeButtonClick(){this._cardLikeButton.addEventListener("click",(()=>{this._toggleCardLikeButton(),this._handleCardLikeClick(this._id,this._isLiked),this._isLiked=!this._isLiked}))}_toggleCardLikeButton(){this._cardLikeButton.classList.toggle("card__like-button_clicked")}_getLikeCount(e){return e.likes.length.toString()}updateLikeCount(e){this._cardLikeCount.textContent=this._getLikeCount(e)}_getLikedUserIds(){return this._likes.map((e=>e._id))}_authenticateCardDelete(){this._userId==this._ownerId&&this._showCardDeleteButton()}_showCardDeleteButton(){this._cardDeleteButton.classList.add("card__delete-button_visible")}_listenCardDeleteButtonClick(){this._cardDeleteButton.addEventListener("click",(()=>{this._handleCardDeleteClick({cardId:this._id})}))}_listenCardImageClick(){this._cardImage.addEventListener("click",(()=>{this._handleCardImageClick(this._data)}))}_setEventListeners(){this._listenCardLikeButtonClick(),this._listenCardDeleteButtonClick(),this._listenCardImageClick()}}class r{constructor(e,t){this._settings=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._buttonElement=this._formElement.querySelector(this._settings.submitButtonSelector)}enableValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._settings.inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)):(this._buttonElement.classList.remove(this._settings.inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_showInputError(e,t){const s=this._formElement.querySelector(`.${e.id}-error`);e.classList.add(this._settings.inputErrorClass),s.textContent=t,s.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}}class i{constructor(e){var t,s;s=e=>{"Escape"===e.key&&this.close()},(t="_handleEscClose")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[t]=s,this._selector=e,this._element=document.querySelector(this._selector)}open(){this._element.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._element.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._element.addEventListener("mousedown",(e=>{e.target===e.currentTarget&&this.close()})),this._element.addEventListener("click",(e=>{e.target.classList.contains("popup__close-button")&&this.close()}))}}class n extends i{constructor(t,s){let{submitForm:r}=s;super(t),this._submitForm=r,this._form=this._element.querySelector(e),this._submitButton=this._element.querySelector(".popup__submit-button"),this._submitButtonInitialText=this._submitButton.textContent,this._inputList=this._element.querySelectorAll(".popup__input")}close(){super.close(),this._form.reset()}getInputValues(){return this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}enableLoadingState(){const e=new RegExp("e$");this._submitButton.textContent=this._submitButtonInitialText.replace(e,"ing...")}disableLoadingState(){this._submitButton.textContent=this._submitButtonInitialText}setEventListeners(){super.setEventListeners(),this._element.addEventListener("submit",this._submitForm)}}const a=document.querySelector(".profile__edit-button"),o=document.querySelector(".profile__add-button"),l=document.querySelector(".profile__avatar-wrapper"),d={},h=new Headers({authorization:"a397cd37-5ffd-4cc9-a80f-9599578123c3","Content-Type":"application/json"}),_=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_handleServerResponse(e){return e.ok?e.json():Promise.reject(e.status)}_handleError(e){console.error(`Error caught in fetch API: ${e}`)}_getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._handleServerResponse).catch(this._handleError)}_getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._handleServerResponse).catch(this._handleError)}getAppInfo(){return Promise.all([this._getUserInfo(),this._getInitialCards()])}editUserInfo(e){let{name:t,about:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this._handleServerResponse).catch(this._handleError)}addNewCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._handleServerResponse).catch(this._handleError)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._handleServerResponse).catch(this._handleError)}addLike(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this._headers}).then(this._handleServerResponse).catch(this._handleError)}deleteLike(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this._headers}).then(this._handleServerResponse).catch(this._handleError)}editUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._handleServerResponse).catch(this._handleError)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:h}),u=new class{constructor(){this._userName=document.querySelector(".profile__name"),this._userAbout=document.querySelector(".profile__about"),this._userAvatar=document.querySelector(".profile__avatar"),this._userInfo=document.querySelector(t)}getUserInfo(){return{name:this._userName.textContent,about:this._userAbout.textContent}}setUserInfo(e){let{name:t,about:s}=e;this._userName.textContent=t,this._userAbout.textContent=s}setUserAvatar(e){this._userAvatar.src=e}renderUserInfo(e){let{name:t,about:s,avatar:r,_id:i}=e;this._userName.textContent=t,this._userAbout.textContent=s,this._userAvatar.src=r,this._userInfo.id=i}},c=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._element=document.querySelector(t)}renderItems(e){e.reverse().forEach((e=>{this.addItem(e)}))}addItem(e){const t=this._renderer(e);this._element.prepend(t)}}({renderer:e=>function(e){const t=new s({data:e,handleCardImageClick:e=>{m.open(e)},handleCardDeleteClick:e=>{g.setInputValues(e),g.open()},handleCardLikeClick:(e,s)=>{s?_.deleteLike(e).then((e=>t.updateLikeCount(e))):_.addLike(e).then((e=>t.updateLikeCount(e)))}},"#card-template");return t.createCard()}(e)},".cards"),m=new class extends i{constructor(e){super(e),this._image=this._element.querySelector(".popup__image"),this._subtitle=this._element.querySelector(".popup__subtitle")}open(e){this._image.src=e.link,this._image.alt=`Image ${e.name}`,this._subtitle.textContent=e.name,super.open()}}(".popup_type_image"),p=new n(".popup_type_avatar",{submitForm:e=>{e.preventDefault(),p.enableLoadingState();const t=p.getInputValues();_.editUserAvatar(t).then((e=>u.setUserAvatar(e.avatar))).finally((()=>{p.close(),p.disableLoadingState()}))}}),C=new n(".popup_type_edit",{submitForm:e=>{e.preventDefault(),C.enableLoadingState();const{name:t,about:s}=C.getInputValues();_.editUserInfo({name:t,about:s}).then((e=>u.setUserInfo(e))).finally((()=>{C.close(),C.disableLoadingState()}))}}),g=new n(".popup_type_delete",{submitForm:e=>{e.preventDefault();const{cardId:t}=g.getInputValues(),s=document.getElementById(t);_.deleteCard(t).then(s.remove()).finally(g.close())}}),b=new n(".popup_type_add",{submitForm:e=>{e.preventDefault(),b.enableLoadingState();const{name:t,link:s}=b.getInputValues();_.addNewCard({name:t,link:s}).then((e=>c.addItem(e))).finally((()=>{b.close(),b.disableLoadingState()}))}});var L;_.getAppInfo().then((e=>{let[t,s]=e;u.renderUserInfo(t),c.renderItems(s)})),m.setEventListeners(),p.setEventListeners(),C.setEventListeners(),b.setEventListeners(),g.setEventListeners(),L={inputSelector:".popup__input",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_inactive",inputErrorClass:"popup__input_error",errorClass:"popup__input-error-text_active"},Array.from(document.querySelectorAll(e)).forEach((e=>{const t=new r(L,e),s=e.getAttribute("name");d[s]=t,t.enableValidation()})),l.addEventListener("click",(()=>{d["avatar-form"].resetValidation(),p.open()})),a.addEventListener("click",(()=>{d["profile-form"].resetValidation(),function(){const e=u.getUserInfo();C.setInputValues(e)}(),C.open()})),o.addEventListener("click",(()=>{d["card-form"].resetValidation(),b.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,