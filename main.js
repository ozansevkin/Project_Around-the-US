!function(){"use strict";const e=".popup__form",t=".profile__info";class s{constructor(e,s){let{data:r,handleCardImageClick:i,handleCardDeleteClick:n,handleCardLikeClick:a}=e;this._data=r,this._userId=document.querySelector(t).id,this._templateSelector=s,this._handleCardImageClick=i,this._handleCardDeleteClick=n,this._handleCardLikeClick=a}createCard(){return this._card=this._getElement(),this._cardName=this._card.querySelector(".card__name"),this._cardImage=this._card.querySelector(".card__image"),this._cardLikeButton=this._card.querySelector(".card__like-button"),this._cardLikeCount=this._card.querySelector(".card__like-count"),this._cardDeleteButton=this._card.querySelector(".card__delete-button"),this._cardName.textContent=this._data.name,this._cardImage.src=this._data.link,this._cardImage.alt=this._data.name,this._card.id=this._data._id,this._cardLikeCount.textContent=this._getLikeCount(this._data),this._findLikeStatus(),this._authenticateCardDelete(),this._setEventListeners(),this._card}_getElement(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}_findLikeStatus(){this._isLiked=this._getLikedUserIds().includes(this._userId),this._isLiked&&this._toggleCardLikeButton()}_listenCardLikeButtonClick(){this._cardLikeButton.addEventListener("click",(()=>{this._handleCardLikeClick(this._data._id,this._isLiked)}))}updateCardLike(e){this._updateLikeCount(e),this._toggleCardLikeButton(),this._isLiked=!this._isLiked}_toggleCardLikeButton(){this._cardLikeButton.classList.toggle("card__like-button_clicked")}_getLikeCount(e){return e.likes.length.toString()}_updateLikeCount(e){this._cardLikeCount.textContent=this._getLikeCount(e)}_getLikedUserIds(){return this._data.likes.map((e=>e._id))}_authenticateCardDelete(){this._userId==this._data.owner._id&&this._showCardDeleteButton()}_showCardDeleteButton(){this._cardDeleteButton.classList.add("card__delete-button_visible")}_listenCardDeleteButtonClick(){this._cardDeleteButton.addEventListener("click",(()=>{this._handleCardDeleteClick({cardId:this._data._id})}))}_listenCardImageClick(){this._cardImage.addEventListener("click",(()=>{this._handleCardImageClick(this._data)}))}_listenCardImageError(){this._cardImage.addEventListener("error",(()=>this._handleCardImageError("https://placehold.co/400x400?text=Around+The+U.S.")))}_handleCardImageError(e){this._data.link=e,this._cardImage.src=e}_setEventListeners(){this._listenCardLikeButtonClick(),this._listenCardDeleteButtonClick(),this._listenCardImageClick(),this._listenCardImageError()}}class r{constructor(e,t){this._settings=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._buttonElement=this._formElement.querySelector(this._settings.submitButtonSelector)}enableValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._settings.inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)):(this._buttonElement.classList.remove(this._settings.inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_showInputError(e,t){const s=this._formElement.querySelector(`.${e.id}-error`);e.classList.add(this._settings.inputErrorClass),s.textContent=t,s.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}}class i{constructor(e){var t,s;s=e=>{"Escape"===e.key&&this.close()},(t="_handleEscClose")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[t]=s,this._selector=e,this._element=document.querySelector(this._selector)}open(){this._element.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._element.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._element.addEventListener("mousedown",(e=>{e.target===e.currentTarget&&this.close()})),this._element.addEventListener("click",(e=>{e.target.classList.contains("popup__close-button")&&this.close()}))}}class n extends i{constructor(t,s){let{handleSubmit:r}=s;super(t),this._handleSubmit=r,this._form=this._element.querySelector(e),this._submitButton=this._element.querySelector(".popup__submit-button"),this._submitButtonInitialText=this._submitButton.textContent,this._inputList=this._element.querySelectorAll(".popup__input")}close(){super.close(),this._form.reset()}getInputValues(){return this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonInitialText}setEventListeners(){super.setEventListeners(),this._element.addEventListener("submit",this._handleSubmit)}}const a=document.querySelector(".profile__edit-button"),o=document.querySelector(".profile__add-button"),d=document.querySelector(".profile__avatar-wrapper"),l={},h=new Headers({authorization:"a397cd37-5ffd-4cc9-a80f-9599578123c3","Content-Type":"application/json"}),u=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_handleServerResponse(e){return e.ok?e.json():Promise.reject(e.status)}_request(e,t){return fetch(e,t).then(this._handleServerResponse)}handleError(e){console.error(`Error caught in fetch API: ${e}`)}_getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{headers:this._headers})}_getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}getAppInfo(){return Promise.all([this._getUserInfo(),this._getInitialCards()])}editUserInfo(e){let{name:t,about:s}=e;return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})})}addNewCard(e){let{name:t,link:s}=e;return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}addLike(e){return this._request(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this._headers})}deleteLike(e){return this._request(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this._headers})}editUserAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)})}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:h}),_=new class{constructor(){this._userName=document.querySelector(".profile__name"),this._userAbout=document.querySelector(".profile__about"),this._userAvatar=document.querySelector(".profile__avatar"),this._userInfo=document.querySelector(t)}getUserInfo(){return{name:this._userName.textContent,about:this._userAbout.textContent}}renderUserInfo(e){let{name:t,about:s,avatar:r,_id:i}=e;this._userName.textContent=t,this._userAbout.textContent=s,this._userAvatar.src=r,this._userInfo.id=i}},c=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._element=document.querySelector(t)}renderItems(e){e.reverse().forEach((e=>{this.addItem(e)}))}addItem(e){const t=this._renderer(e);this._element.prepend(t)}}({renderer:function(e){const t=new s({data:e,handleCardImageClick:e=>{m.open(e)},handleCardDeleteClick:e=>{g.setInputValues(e),g.open()},handleCardLikeClick:(e,s)=>{s?u.deleteLike(e).then((e=>{t.updateCardLike(e)})).catch(u.handleError):u.addLike(e).then((e=>{t.updateCardLike(e)})).catch(u.handleError)}},"#card-template");return t.createCard()}},".cards"),m=new class extends i{constructor(e){super(e),this._image=this._element.querySelector(".popup__image"),this._subtitle=this._element.querySelector(".popup__subtitle")}open(e){this._image.src=e.link,this._image.alt=`Image ${e.name}`,this._subtitle.textContent=e.name,super.open()}}(".popup_type_image"),p=new n(".popup_type_avatar",{handleSubmit:e=>{e.preventDefault(),p.renderLoading(!0);const t=p.getInputValues();u.editUserAvatar(t).then((e=>{_.renderUserInfo(e),p.close()})).catch(u.handleError).finally((()=>{p.renderLoading(!1)}))}}),C=new n(".popup_type_edit",{handleSubmit:e=>{e.preventDefault(),C.renderLoading(!0);const{name:t,about:s}=C.getInputValues();u.editUserInfo({name:t,about:s}).then((e=>{_.renderUserInfo(e),C.close()})).catch(u.handleError).finally((()=>{C.renderLoading(!1)}))}}),g=new n(".popup_type_delete",{handleSubmit:e=>{e.preventDefault();const{cardId:t}=g.getInputValues(),s=document.getElementById(t);u.deleteCard(t).then((()=>{s.remove(),g.close()})).catch(u.handleError)}}),L=new n(".popup_type_add",{handleSubmit:e=>{e.preventDefault(),L.renderLoading(!0,"Creating...");const{name:t,link:s}=L.getInputValues();u.addNewCard({name:t,link:s}).then((e=>{c.addItem(e),L.close()})).catch(u.handleError).finally((()=>{L.renderLoading(!1)}))}});var k;u.getAppInfo().then((e=>{let[t,s]=e;_.renderUserInfo(t),c.renderItems(s)})).catch(u.handleError),m.setEventListeners(),p.setEventListeners(),C.setEventListeners(),L.setEventListeners(),g.setEventListeners(),k={inputSelector:".popup__input",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_inactive",inputErrorClass:"popup__input_error",errorClass:"popup__input-error-text_active"},Array.from(document.querySelectorAll(e)).forEach((e=>{const t=new r(k,e),s=e.getAttribute("name");l[s]=t,t.enableValidation()})),d.addEventListener("click",(()=>{l["avatar-form"].resetValidation(),p.open()})),a.addEventListener("click",(()=>{l["profile-form"].resetValidation(),function(){const e=_.getUserInfo();C.setInputValues(e)}(),C.open()})),o.addEventListener("click",(()=>{l["card-form"].resetValidation(),L.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,